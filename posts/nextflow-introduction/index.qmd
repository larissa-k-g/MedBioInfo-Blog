---
title: "Getting started with nextflow"
author: "Larissa Kahnwald"
date: "2025-10-08"
categories: [news]
---
![](pipelines.jpg){style="float:right; width:45%; margin:0 0 1rem 1rem;"}  

In the last Blog we learned that to use tools as e.g. (FastQC and MultiQC)[https://larissa-k-g.github.io/MedBioInfo-Blog/posts/Quality-control/#fastqc] we need a script with the instructions on how that tool should be used. However, if multiple tools are involved during the progression of a project each tool would need to be started one by one. This is not only very tedious, but also risks inconsitstencies in the workflow and reduces the reproducibility. Therefore, workflow managers are used, to provide pipelines, that allow easier and consistnent workflow and sharing. 
(Nextflow)[https://nextflow.io/docs/latest/#nextflow] is an open source workflow manager which not only creates an automated pipeline but also allows you to resume from the point of error, if some part of the pipline needs deebugging. It comes with build-in git version control and allows any code language. Generally, workflow managers can run containers as well, which increases the shareability even more. No need to install any softwares and version conflicts are eliminated as well! In the end only one command is needed to execute a whole sequence of scripts and tools, which makes it more accessible to researcher with less bioinformatics experience.  
Fundamentally, Nextflow provieds channels, tracking in- and output that connect different modules/tools/processes which are defined in scripts, keeping each process independet. This allows that each script could be written in a differentn scripting language if wanted. Nextflow keeps track, navigates and even allows to parallelize the flow of your data in a time-efficient manner, making it highly scalable as well.  

#### Before starting   
-> Before getting started set up a screen session, with Pixi as environment manager and add nextflow to your environment:   
`$screen -S nextflow`
`$pixi init -c bioconda -c conda-forge`
`$pixi add nextflow`  

#### Writing a Nexflow script  
A simple .nf file can be set up like this:  
```script     
#!/usr/bin/env nextflow

params.greeting = 'Hello world!'
greeting_ch = Channel.of(params.greeting)

process SPLITLETTERS {
    input:
    val x

    output:
    path 'chunk_*'

    script:
    """
    printf '$x' | split -b 6 - chunk_
    """
}

process CONVERTTOUPPER {
    input:
    path y

    output:
    stdout

    script:
    """
    cat $y | tr '[a-z]' '[A-Z]' 
    """
}

workflow {
    letters_ch = SPLITLETTERS(greeting_ch)
    results_ch = CONVERTTOUPPER(letters_ch.flatten())
    results_ch.view{ it }
} 
```

(Nf-core)[https://nf-co.re] provides different modules to put in your pipeline and even whole pipelines that you can adjust to your needs. 
Command line has the highest priority, more details to hierachy on canvas
pixi run nextflow run hello.nf -resume --greeting 'Bonjour le monde!' does then 