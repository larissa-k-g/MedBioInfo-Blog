---
title: "Work environments and Containerss"
author: "Larissa Kahnwald"
date: "2025-10-07"
categories: [news]
---
![Pixi](pixi2025-10-07.png){style="float:right; width:45%; margin:0 0 1rem 1rem;"}

In science reproducibility and accessibility are two key factors. This does not only apply during the data collection phase of a project but particularly also during its analyisis. To ensure that the same script runs the same way anywhere else we can use environments and containers.
That sounds great, but does that mean? 
Environments are like isolated spaces where you can install all the tools and packages that you need for a specific analysis. It's basically like a lab bench that you set up with everything you need, chemicals, pipettes etc. for a specific experiment. Environment managers, such as **Pixi**, make it possible to have multiple different set ups right next to eachother, without one spilling over to the other one and even support you in finding the tools that you want.
Containers on the other hand are like a bench on wheels. They contain everything tools, chemicals, hoods, chairs, the bench itself the protocol etc. They are easily shareable and the next person can just open them and run the analysis on their dataset again.

1. To start, install pixie run this in your command line:  
`$curl -fsSL https://pixi.sh/install.sh | sh` 
2. Create a new project directory
3. Add conda-forge and bioconda channels using -c flag:  
`$pixi init folder_name -c conda-forge -c bioconda`  
<p style="margin-left:2em;"> -> Channels will give Pixi a source from were to install the dependencies. It's like telling Pixi which shop to go to to buy all the tools you need.</p>
4. In your new folder you can now find a file - **pixi.toml**
<p style="margin-left:2em;"> -> .toml contains all the important information about your environment. It tells you the channels you have added, the name you have given the environment, which operating system, in which version it has been optimized for. Here we can also define different tasks and a list of all the tools/dependencies that have been installed in this environment, after they have been added.</p>   
5. To add a new tool/dependency you need to be in the project's folder. Then you can simply use the command:  
`$pixi add Quarto`  
e.g. to add Quarto 
`<p style="margin-left:2em;"> -> to see if it was installed properly you can either test it with the command `$pixi run quarto --help`or go back to the .toml file and find that Quarto has been added as a dependency.</p>`  
6. No that you have added a tool, yet another file has been added to your project folder: pixi.lock.  
`<p style="margin-left:2em;"> -> .lock tracks everything pixi actually did to install your tool, the channels, where the packages were downloaded from, licences etc. </p>` 
**!OBS: DON'T EVER DELETE .toml OR .lock. THIS WILL CAUSE YOUR ENVIRONMENT TO BREAK!** 
7. To use your tool you can use:  
`$pixi run quarto --help"
**Pro-Tip:** You can also enter the environment using `$pixi shell`. This allows you to forget about pixi and just run your commands as "normally" e.g. `$quarto --help. To leave it again, just type exit into the commandline and press enter.